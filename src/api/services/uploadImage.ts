import {Alert} from 'react-native';
import axiosInstance, {ApiResponse} from '../axiosInstance';
import {ApiEndpoints} from '../endpoints';
import {
  UploadFile,
  UploadResponse,
  UploadErrorCode,
  UploadRequest,
  UploadResponseResult,
} from '../types/upload';

import {AxiosError} from 'axios';
import {encode} from 'base64-arraybuffer';

export class UploadError extends Error {
  constructor(message: string, public code?: number) {
    super(message);
    this.name = 'UploadError';
  }
}

export const uploadImage = async (file: UploadFile): Promise<UploadRequest> => {
  try {
    if (!file?.fileName) {
      throw new UploadError('File kh√¥ng h·ª£p l·ªá');
    }
    const formData = new FormData();
    formData.append('file', {
      uri: file.uri,
      type: file.type,
      name: file.fileName,
    } as any);
    formData.append('type', file.typeapi);

    const response = await axiosInstance.post<ApiResponse<UploadRequest>>(
      ApiEndpoints.UPLOAD_IMAGE,
      formData,
      {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        timeout: 30000,
      },
    );

    if (!response.data?.result) {
      throw new UploadError('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ƒë∆∞·ªùng d·∫´n ·∫£nh t·ª´ server');
    }

    return response.data.result;
  } catch (error) {
    const axiosError = error as AxiosError<ApiResponse<UploadResponse>, any>;
    if (axiosError.response) {
      // Server responded with a status code outside the 2xx range
      console.error('üî¥ L·ªói t·ª´ response server:', {
        status: axiosError.response.status,
        message: axiosError.response.data?.message || 'Unknown error',
        result: axiosError.response.data?.result || null,
      });

      const status = axiosError.response.status;
      switch (status) {
        case 413: // File too large
          Alert.alert('Error', 'K√≠ch th∆∞·ªõc file qu√° l·ªõn');
          throw new UploadError(
            'K√≠ch th∆∞·ªõc file qu√° l·ªõn',
            UploadErrorCode.FILE_TOO_LARGE,
          );
        case 415: // Unsupported format
          Alert.alert('Error', 'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£');
          throw new UploadError(
            'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£',
            UploadErrorCode.UNSUPPORTED_FORMAT,
          );
        default:
          Alert.alert(
            'Error',
            `Code: ${axiosError.response.status}\nMessage: ${
              axiosError.response.data?.message || 'Unknown error'
            }`,
          );
          throw new UploadError(
            `L·ªói upload: ${
              axiosError.response.data?.message || 'Vui l√≤ng th·ª≠ l·∫°i'
            }`,
            axiosError.response.status,
          );
      }
    } else if (axiosError.request) {
      // No response received from the server
      console.error('‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ server:', {
        request: axiosError.request, // Log the request object
        config: axiosError.config, // Log the request configuration
      });

      Alert.alert(
        'Network Error',
        'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.',
      );

      throw new UploadError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
    } else {
      // Other errors (e.g., client-side or unexpected issues)
      console.error('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh:', {
        message: axiosError.message,
        stack: axiosError.stack, // Log the error stack trace
      });

      Alert.alert(
        'Unknown Error',
        `ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: ${
          axiosError.message || 'Vui l√≤ng th·ª≠ l·∫°i'
        }`,
      );

      throw new UploadError(
        axiosError.message || 'C√≥ l·ªói x·∫£y ra khi upload ·∫£nh',
      );
    }
  }
};

export const getDocuments = async (
  documentIds: string[],
): Promise<ApiResponse<UploadResponseResult>[]> => {

  try {

    if (!Array.isArray(documentIds) || documentIds.length === 0) {
      console.error('‚ö†Ô∏è Kh√¥ng c√≥ ID n√†o ƒë∆∞·ª£c cung c·∫•p');
      return [];
    }

    const results: ApiResponse<UploadResponseResult>[] = []; // Thay ƒë·ªïi type c·ªßa results

    for (const documentId of documentIds) {
      try {
        const response = await axiosInstance.get<ApiResponse<UploadResponseResult>>(
          `/documents/${documentId}`,
        );
        if (response.data) {
          results.push(response.data); // Thay ƒë·ªïi ·ªü ƒë√¢y
        } else {
          console.warn(`‚ö†Ô∏è T√†i li·ªáu ${documentId} kh√¥ng c√≥ d·ªØ li·ªáu`);
        }
      } catch (error: any) {
        console.error(`‚ùå L·ªói khi g·ªçi t√†i li·ªáu ${documentId}:`, error.message);
        continue;
      }
    }
    return results;
  } catch (error: any) {
    console.error('‚ùå L·ªói t·ªïng qu√°t trong getDocuments:', error);
    Alert.alert('L·ªói', error.message || 'C√≥ l·ªói x·∫£y ra khi l·∫•y t√†i li·ªáu');
    return [];
  }
};

export const fetchImage = async (fileUri: string): Promise<string> => {
  try {
    // Lo·∫°i b·ªè ph·∫ßn "/api/v1" t·ª´ fileUri
    const sanitizedUri = fileUri.replace('/api/v1', '');
    // Make the GET request
    const response = await axiosInstance.get(sanitizedUri, {
      responseType: 'arraybuffer',
      timeout: 30000, // Set a timeout for the request
    });

    // Convert the array buffer to Base64
    const base64Image = `data:image/jpeg;base64,${encode(response.data)}`;

    return base64Image;
  } catch (error: any) {
    console.error('Error fetching image:', error);

    // Handle errors
    if (error.response) {
      console.error('üî¥ Server error:', {
        status: error.response.status,
        message: error.response.data?.message || 'Unknown error',
      });

      Alert.alert(
        'Error',
        `Failed to fetch image. Code: ${error.response.status}\nMessage: ${
          error.response.data?.message || 'Unknown error'
        }`,
      );
    } else if (error.request) {
      console.error('‚ùå No response from server:', error.request);

      Alert.alert(
        'Network Error',
        'Could not connect to the server. Please check your network and try again.',
      );
    } else {
      console.error('‚ùå Unknown error:', error.message);

      Alert.alert(
        'Unknown Error',
        `An unknown error occurred: ${error.message || 'Please try again'}`,
      );
    }

    throw new Error('Failed to fetch image');
  }
};
